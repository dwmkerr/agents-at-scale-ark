import {Command} from 'commander';
import inquirer from 'inquirer';
import chalk from 'chalk';
import fs from 'fs';
import path from 'path';
import output from '../../lib/output.js';

interface ToolConfig {
  name: string;
  language: string;
  framework: string;
  outputPath: string;
}

async function initTool() {
  console.log(chalk.blue('ARK MCP Tool Initializer\n'));

  // Get current working directory
  const cwd = process.cwd();

  // Prompt for tool configuration
  const answers = await inquirer.prompt([
    {
      type: 'input',
      name: 'name',
      message: 'Tool name (e.g., get_weather):',
      validate: (input: string) => {
        if (!input.trim()) {
          return 'Tool name is required';
        }
        if (!/^[a-z][a-z0-9_]*$/.test(input)) {
          return 'Tool name must be lowercase, start with a letter, and contain only letters, numbers, and underscores';
        }
        return true;
      },
    },
    {
      type: 'list',
      name: 'language',
      message: 'Language:',
      choices: ['python'],
      default: 'python',
    },
    {
      type: 'list',
      name: 'framework',
      message: 'Framework:',
      choices: ['fastmcp'],
      default: 'fastmcp',
    },
  ]);

  // Determine output filename based on language
  const extension = answers.language === 'python' ? 'py' : 'js';
  const filename = `${answers.name}.${extension}`;
  const outputPath = path.join(cwd, filename);

  // Check if file already exists
  if (fs.existsSync(outputPath)) {
    const overwrite = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'overwrite',
        message: `File '${filename}' already exists. Overwrite?`,
        default: false,
      },
    ]);

    if (!overwrite.overwrite) {
      console.log(chalk.yellow('Operation cancelled.'));
      return;
    }
  }

  // Confirm creation
  const confirm = await inquirer.prompt([
    {
      type: 'confirm',
      name: 'proceed',
      message: `'${filename}' will be created at '${cwd}'. OK to continue?`,
      default: true,
    },
  ]);

  if (!confirm.proceed) {
    console.log(chalk.yellow('Operation cancelled.'));
    return;
  }

  // Create the tool file
  const toolConfig: ToolConfig = {
    name: answers.name,
    language: answers.language,
    framework: answers.framework,
    outputPath,
  };

  try {
    createToolFile(toolConfig);
    console.log(chalk.green(`\nTool '${filename}' created successfully`));
    console.log(chalk.cyan('\nNext steps:\n'));
    console.log(`1. Install fastmcp:`);
    console.log(chalk.yellow(`   pip install fastmcp`));
    console.log(`\n2. Test your tool:`);
    console.log(chalk.yellow(`   python ${filename}`));
    console.log(`\n3. Add your tool logic in the handler function`);
    console.log(`\nFor more information, see: https://github.com/jlowin/fastmcp`);
  } catch (error) {
    output.error(`Failed to create tool: ${error instanceof Error ? error.message : 'Unknown error'}`);
    process.exit(1);
  }
}

function createToolFile(config: ToolConfig) {
  const template = getPythonFastMCPTemplate(config.name);
  fs.writeFileSync(config.outputPath, template);
}

function getPythonFastMCPTemplate(toolName: string): string {
  // Convert snake_case to Title Case for description
  const toolDescription = toolName
    .split('_')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');

  return `#!/usr/bin/env python3
"""
${toolDescription} Tool for ARK
Generated by ark dev tool init
"""

from fastmcp import FastMCP

# Initialize the MCP server
mcp = FastMCP("${toolName}")

@mcp.tool()
def ${toolName}(query: str) -> str:
    """
    ${toolDescription}
    
    Args:
        query: The input query or parameters for the tool
        
    Returns:
        The result of the ${toolName} operation
    """
    # TODO: Implement your tool logic here
    return f"${toolDescription} result for query: {query}"

# Additional tools can be added here
# @mcp.tool()
# def another_tool(param: str) -> str:
#     """Another tool description"""
#     return f"Result: {param}"

if __name__ == "__main__":
    # Run the MCP server
    mcp.run()
`;
}

export function createToolCommand(): Command {
  const toolCommand = new Command('tool');
  toolCommand.description('MCP tool development utilities');

  const initCommand = new Command('init');
  initCommand
    .description('Initialize a new MCP tool')
    .action(initTool);

  toolCommand.addCommand(initCommand);

  return toolCommand;
}